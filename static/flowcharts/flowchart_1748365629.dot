digraph G {
    node [shape=box, style="rounded,filled", fillcolor="#e0f7fa", fontname="Arial"]
    edge [fontname="Arial"]

    start [label="Start", shape=ellipse, fillcolor="#ffcdd2"]
    end [label="End", shape=ellipse, fillcolor="#ffcdd2"]

    fib_start [label="fibonacci(n)"]
    fib_cond1 [label="n <= 0?"]
    fib_return0 [label="Return 0"]
    fib_cond2 [label="n == 1?"]
    fib_return1 [label="Return 1"]
    fib_recursive [label="Return fibonacci(n-1) + fibonacci(n-2)"]

    calc_start [label="calculate_sequence(max_n)"]
    calc_init [label="result = []"]
    calc_loop [label="for i in range(max_n)"]
    calc_append [label="result.append(fibonacci(i))"]
    calc_return [label="Return result"]

    main_start [label="__main__"]
    main_setn [label="n = 10"]
    main_print1 [label="Print header"]
    main_print2 [label="Print sequence"]
    main_call [label="calculate_sequence(n)"]

    start -> main_start
    main_start -> main_setn
    main_setn -> main_print1
    main_print1 -> main_call
    main_call -> calc_start
    calc_start -> calc_init
    calc_init -> calc_loop
    calc_loop -> calc_append [label="loop"]
    calc_append -> fib_start
    fib_start -> fib_cond1
    fib_cond1 -> fib_return0 [label="Yes"]
    fib_cond1 -> fib_cond2 [label="No"]
    fib_cond2 -> fib_return1 [label="Yes"]
    fib_cond2 -> fib_recursive [label="No"]
    fib_return0 -> calc_append
    fib_return1 -> calc_append
    fib_recursive -> calc_append
    calc_loop -> calc_return [label="end loop"]
    calc_return -> main_print2
    main_print2 -> end

    {rank=same; fib_cond1 fib_cond2}
    {rank=same; fib_return0 fib_return1 fib_recursive}
}